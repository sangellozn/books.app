package info.san.biblio.app.command.handler;

import info.san.biblio.app.command.serie.SerieCreateCommand;
import info.san.biblio.app.command.serie.SerieRegisterSaisonCommand;
import info.san.biblio.app.command.serie.SerieUpdateCommand;
import info.san.biblio.app.ddd.serie.Serie;
import info.san.biblio.app.exception.NameAlreadyTakenException;
import info.san.biblio.app.query.SerieQueryRepository;

import org.axonframework.commandhandling.annotation.CommandHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Serie command handlers.
 *
 * @author ANGELLOZ-NICOUD SÃ©bastien
 */
public class SerieCommandHandler extends AbstractBasicCommandHandler<Serie, String> {

	private static final Logger LOGGER = LoggerFactory.getLogger(SerieCommandHandler.class);

	private SerieQueryRepository serieQueryRepository = new SerieQueryRepository();

	public SerieCommandHandler() {
		super(Serie.class);
	}

	@CommandHandler
	public void handle(SerieCreateCommand cmd) {
		if (!this.serieQueryRepository.isNameExists(cmd.getName())) {
			Serie s = new Serie(cmd.getId(), cmd.getName());
			this.getRepository().add(s);
		} else {
			SerieCommandHandler.LOGGER.error("The name '{}' for a serie is already taken.", cmd.getName());
			throw new NameAlreadyTakenException("The name '" + cmd.getName() + "' for a serie is already taken.");
		}
	}

	@CommandHandler
	public void handle(SerieUpdateCommand cmd) {
		if (!this.serieQueryRepository.isNameExists(cmd.getName())) {
			Serie s = this.getRepository().load(cmd.getId());
			s.update(cmd.getName());
		} else {
			SerieCommandHandler.LOGGER.error("The name '{}' for a serie is already taken.", cmd.getName());
			throw new NameAlreadyTakenException("The name '" + cmd.getName() + "' for a serie is already taken.");
		}
	}

	@CommandHandler
	public void handle(SerieRegisterSaisonCommand cmd) {
		Serie s = this.getRepository().load(cmd.getSerieId());
		s.registerSaison(cmd.getSaisonIdx(), cmd.getSaisonId(), cmd.getSaisonName());
	}

}
