package info.san.biblio.app.ddd.serie;

import info.san.biblio.app.event.serie.SaisonCreatedEvent;
import info.san.biblio.app.event.serie.SaisonDeletedEvent;
import info.san.biblio.app.event.serie.SerieCreatedEvent;
import info.san.biblio.app.event.serie.SerieUpdatedEvent;

import java.util.HashMap;
import java.util.Map;

import org.axonframework.eventhandling.annotation.EventHandler;
import org.axonframework.eventsourcing.annotation.AbstractAnnotatedAggregateRoot;
import org.axonframework.eventsourcing.annotation.AggregateIdentifier;

public class Serie extends AbstractAnnotatedAggregateRoot<String> {

	private static final long serialVersionUID = -1665826640828825927L;

	@AggregateIdentifier
	private String id;

	private Map<Integer, Saison> saisons;

	public Serie() {
		this.saisons = new HashMap<Integer, Saison>();
	}

	public Serie(String id, String name) {
		this.apply(new SerieCreatedEvent(id, name));
	}

	public void update(String name) {
		this.apply(new SerieUpdatedEvent(this.id, name));
	}

	public void registerSaison(Integer idx, String saisonId, String saisonName) {
		if (this.saisons.containsKey(idx)) {
			this.apply(new SaisonDeletedEvent(this.saisons.get(idx).getId()));
			this.apply(new SaisonCreatedEvent(saisonId, saisonName, this.id, idx));
		} else {
			this.apply(new SaisonCreatedEvent(saisonId, saisonName, this.id, idx));
		}
	}

	public String getId() {
		return this.id;
	}

	@EventHandler
	public void handle(SerieCreatedEvent e) {
		this.id = e.getId();
	}

	@EventHandler
	public void handle(SaisonCreatedEvent e) {
		this.saisons.put(e.getIdx(), new Saison(e.getId()));
	}

}
