/**
 *
 */
package info.san.books.app.model.listener;

import info.san.books.app.Persistence;
import info.san.books.app.event.livre.LivreAssignedAuteurEvent;
import info.san.books.app.event.livre.LivreCreatedEvent;
import info.san.books.app.event.livre.LivreDeletedEvent;
import info.san.books.app.event.livre.LivreUnassignedAuteurEvent;
import info.san.books.app.event.livre.LivreUpdatedEvent;
import info.san.books.app.model.entry.AuteurEntry;
import info.san.books.app.model.entry.LivreEntry;
import info.san.books.app.model.entry.SagaEntry;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;

import org.axonframework.eventhandling.annotation.EventHandler;

/**
 * @author ANGELLOZ-NICOUD SÃ©bastien
 *
 */
public class LivreListener extends AbstractListener {

	@EventHandler
	public void handle(LivreCreatedEvent e) {
		EntityManager em = Persistence.getInstance().createEntityManager();

		EntityTransaction t = em.getTransaction();

		t.begin();

		LivreEntry entry = new LivreEntry();
		entry.setEditeur(e.getEditeur());
		entry.setFormat(e.getFormat());
		entry.setImagePath(e.getImagePath());
		entry.setIsbn(e.getIsbn());
		entry.setLangue(e.getLangue());
		entry.setNbPage(e.getNbPage());
		entry.setResume(e.getResume());
		entry.setTitre(e.getTitre());
		entry.setTitreOriginal(e.getTitreOriginal());
		entry.setLu(e.isLu());
		entry.setPossede(e.isPossede());

		if (e.getSagaId() != null && !e.getSagaId().trim().isEmpty()) {
			SagaEntry saga = em.getReference(SagaEntry.class, e.getSagaId());
			entry.setSaga(saga);
			/*saga.getLivres().add(entry);
			em.merge(saga);*/
		}

		em.persist(entry);

		t.commit();
	}

	@EventHandler
	public void handle(LivreUpdatedEvent e) {
		EntityManager em = Persistence.getInstance().createEntityManager();

		EntityTransaction t = em.getTransaction();

		t.begin();

		LivreEntry entry = em.find(LivreEntry.class, e.getIsbn());
		entry.setEditeur(e.getEditeur());
		entry.setFormat(e.getFormat());
		entry.setImagePath(e.getImagePath());
		entry.setIsbn(e.getIsbn());
		entry.setLangue(e.getLangue());
		entry.setNbPage(e.getNbPage());
		entry.setResume(e.getResume());
		entry.setTitre(e.getTitre());
		entry.setTitreOriginal(e.getTitreOriginal());
		entry.setLu(e.isLu());
		entry.setPossede(e.isPossede());

		if (e.getSagaId() != null && !e.getSagaId().trim().isEmpty()) {
			SagaEntry saga = em.getReference(SagaEntry.class, e.getSagaId());
			entry.setSaga(saga);
			//saga.getLivres().add(entry);
		} else {
			entry.setSaga(null);
		}

		t.commit();
	}

	@EventHandler
	public void handle(LivreDeletedEvent e) {
		EntityManager em = Persistence.getInstance().createEntityManager();

		EntityTransaction t = em.getTransaction();

		t.begin();

		LivreEntry entry = em.getReference(LivreEntry.class, e.getIsbn());
		em.remove(entry);

		t.commit();
	}

	@EventHandler
	public void handle(LivreAssignedAuteurEvent e) {
		EntityManager em = Persistence.getInstance().createEntityManager();

		EntityTransaction t = em.getTransaction();

		t.begin();

		LivreEntry livre = em.find(LivreEntry.class, e.getIsbn());
		AuteurEntry auteur = em.find(AuteurEntry.class, e.getAuteurId());

		livre.getAuteurs().add(auteur);
		auteur.getLivres().add(livre);

		t.commit();
	}

	@EventHandler
	public void handle(LivreUnassignedAuteurEvent e) {
		EntityManager em = Persistence.getInstance().createEntityManager();

		EntityTransaction t = em.getTransaction();

		t.begin();

		LivreEntry livre = em.find(LivreEntry.class, e.getIsbn());
		AuteurEntry auteur = em.find(AuteurEntry.class, e.getAuteurId());

		livre.getAuteurs().remove(auteur);
		auteur.getLivres().remove(livre);

		t.commit();
	}

}
