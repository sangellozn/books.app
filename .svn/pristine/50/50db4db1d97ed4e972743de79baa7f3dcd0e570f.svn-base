package info.san.biblio.app.rest;

import info.san.biblio.app.command.serie.SerieCreateCommand;
import info.san.biblio.app.command.serie.SerieRegisterSaisonCommand;
import info.san.biblio.app.command.serie.SerieUpdateCommand;
import info.san.biblio.app.model.entry.SerieEntry;
import info.san.biblio.app.query.Ordering;
import info.san.biblio.app.query.Page;
import info.san.biblio.app.query.SerieQueryRepository;
import info.san.biblio.app.rest.dto.serie.SaisonEntryDTO;
import info.san.biblio.app.rest.dto.serie.SerieEntryDTO;
import info.san.biblio.app.rest.dto.visitor.SerieEntryDTOVisitor;
import info.san.biblio.app.rest.exceptionmapper.BasicExceptionMessage;

import java.net.URI;
import java.util.ArrayList;
import java.util.Collection;

import javax.ws.rs.DELETE;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

/**
 * REST services for Series objects.
 */
@Path(RestPathConstants.SERIES_BASE_PATH)
public class SeriesRest extends AbstractBasicRest<SerieEntryDTO> {

	private SerieQueryRepository serieQueryRepository = new SerieQueryRepository();

	@Override
	@GET
	public Response findAll(@QueryParam("order") @DefaultValue("") String orderBy,
			@QueryParam("p") @DefaultValue("0") int page,
			@QueryParam("l") @DefaultValue("0") int limit) {
		Collection<SerieEntry> entries = this.serieQueryRepository.findAll(new Ordering(orderBy), new Page(page, limit));
		Collection<SerieEntryDTO> res  = new ArrayList<SerieEntryDTO>();

		for (SerieEntry s : entries) {
			SerieEntryDTOVisitor visitor = new SerieEntryDTOVisitor();
			s.accept(visitor);
			res.add(visitor.getDto());
		}

		return Response.ok(res).build();
	}

	@Override
	@GET
	@Path("{id}")
	public Response find(@PathParam("id") String id) {
		SerieEntry s = this.serieQueryRepository.find(id);
		if (s == null) {
			return Response.status(Status.NOT_FOUND).entity(new BasicExceptionMessage("NotFound", "Serie with id '" + id + "' does not exists.")).build();
		}

		SerieEntryDTOVisitor visitor = new SerieEntryDTOVisitor();
		s.accept(visitor);

		return Response.ok(visitor.getDto()).build();
	}

	@Override
	@POST
	public Response create(SerieEntryDTO s) {
		if (s == null || s.getName() == null || s.getName().isEmpty()) {
			return Response.status(Status.BAD_REQUEST).entity(new BasicExceptionMessage("BadRequest", "The serie name must be not null or empty.")).build();
		}

		SerieCreateCommand cmd = new SerieCreateCommand(s.getName());
		this.commandGateway.sendAndWait(cmd);

		return Response.ok().contentLocation(URI.create(RestPathConstants.SERIES_BASE_PATH + "/" + cmd.getId())).build();
	}

	@Override
	@PUT
	@Path("{id}")
	public Response update(@PathParam("id") String id, SerieEntryDTO s) {
		if (s == null || !id.equals(s.getId())) {
			return Response.status(Status.BAD_REQUEST).entity(new BasicExceptionMessage("BadRequest", "The serie does not match the specified path.")).build();
		}

		SerieUpdateCommand cmd = new SerieUpdateCommand(s.getId(), s.getName());
		this.commandGateway.sendAndWait(cmd);

		return Response.noContent().build();
	}

	@Override
	@DELETE
	@Path("{id}")
	public Response delete(@PathParam("id") String id, SerieEntryDTO s) {
		return null; // FIXME
	}

	@POST
	@Path("{id}/saisons")
	public Response addSaison(@PathParam("id") String id, SaisonEntryDTO entry) {
		if (entry == null) {
			return Response.status(Status.BAD_REQUEST).entity(new BasicExceptionMessage("BadRequest", "The saison object cannot be null.")).build();
		}

		if (entry.getName() == null || entry.getName().isEmpty()) {
			return Response.status(Status.BAD_REQUEST).entity(new BasicExceptionMessage("BadRequest", "The saison name cannot be null or empty.")).build();
		}

		SerieRegisterSaisonCommand cmd = new SerieRegisterSaisonCommand(id, entry.getName(), entry.getIdx());
		this.commandGateway.sendAndWait(cmd);

		return Response.ok().contentLocation(URI.create(RestPathConstants.SERIES_BASE_PATH + "/" + id + "/saisons/"+ cmd.getSaisonId())).build();
	}


}
